{"version":3,"sources":["components/Backdrop/Backdrop.js","components/Modal/Modal.js","components/EventCalendar/EventCalendar.js","App.js","reportWebVitals.js","index.js"],"names":["backdrop","props","show","className","onClick","clicked","modal","modalClosed","style","transform","opacity","children","EventCalendar","state","weekendsVisible","currentEvents","title","date","color","toggle","dateclicked","name","toggle1","eventClicked","startTime","eventid","weekendView","setState","handleDateClick","info","dateStr","handleTitleOnChange","e","preventDefault","target","value","handleDateOnChange","handleStartOnChange","handleSubmit","item","getRandomColor","concat","handleEventClick","event","id","window","confirm","remove","delEvent","letters","split","i","Math","round","random","plugins","dayGridPlugin","interactionPlugin","bootstrapPlugin","initialView","selectable","events","this","weekends","dayMaxEventRows","customButtons","myCustomButton","text","click","headerToolbar","left","center","right","buttonText","today","month","week","day","list","displayEventTime","select","handleDateSelect","eventsSet","handleEvents","dateClick","eventClick","datechosen","Form","onSubmit","Group","Label","Control","type","placeholder","onChange","Button","variant","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4c75046.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Backdrop.css\";\r\n\r\nconst backdrop = (props) =>\r\n  props.show ? <div className=\"Backdrop\" onClick={props.clicked}></div> : null;\r\n\r\nexport default backdrop;\r\n","import React from \"react\";\r\nimport \"./Modal.css\";\r\nimport Backdrop from \"../Backdrop/Backdrop\";\r\n//import 'react-bootstrap';\r\n//import 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst modal = (props) => {\r\n  return (\r\n    <div>\r\n      <Backdrop show={props.show} clicked={props.modalClosed} />\r\n      <div\r\n        className=\"Modal\"\r\n        style={{\r\n          transform: props.show ? \"translateY(0)\" : \"translateY(-100vh)\",\r\n          opacity: props.show ? 1 : 0,\r\n        }}\r\n      >\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default modal;\r\n","import React, { Component } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"@fortawesome/fontawesome-free/css/all.css\";\r\nimport bootstrapPlugin from \"@fullcalendar/bootstrap\";\r\nimport \"./EventCalendar.css\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport Modal from \"../Modal/Modal\";\r\n\r\nclass EventCalendar extends Component {\r\n  state = {\r\n    weekendsVisible: true,\r\n    currentEvents: [\r\n      { title: \"Event1\", date: \"2020-11-11\", color: \"purple\" },\r\n      { title: \"Event2\", date: \"2020-10-11\" },\r\n      { title: \"Event3\", date: \"2020-10-11\" },\r\n      { title: \"Event4\", date: \"2020-10-11\" },\r\n      { title: \"Event5\", date: \"2020-10-11\" },\r\n    ],\r\n    toggle: false,\r\n    dateclicked: \"\",\r\n    name: \"\",\r\n    toggle1: false,\r\n    eventClicked: \"\",\r\n    startTime: \"\",\r\n    eventid: false,\r\n  };\r\n\r\n  weekendView = () => {\r\n    this.setState({ weekendsVisible: !this.state.weekendsVisible });\r\n  };\r\n\r\n  handleDateClick = (info) => {\r\n    this.setState({ toggle: !this.state.toggle, dateclicked: info.dateStr });\r\n  };\r\n\r\n  handleTitleOnChange = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ name: e.target.value });\r\n  };\r\n\r\n  handleDateOnChange = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ dateclicked: e.target.value });\r\n  };\r\n\r\n  handleStartOnChange = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ startTime: e.target.value });\r\n  };\r\n\r\n  getRandomColor() {\r\n    var letters = \"0123456789ABCDEF\".split(\"\");\r\n    var color = \"#\";\r\n    for (var i = 0; i < 6; i++) {\r\n      color += letters[Math.round(Math.random() * 15)];\r\n    }\r\n    return color;\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    const item = {};\r\n    item.title = this.state.name;\r\n    item.date = this.state.dateclicked;\r\n    //if(this.state.startTime !== null){\r\n    //item.start = this.state.startTime;\r\n    //}\r\n    item.color = this.getRandomColor();\r\n    this.setState({\r\n      currentEvents: this.state.currentEvents.concat(item),\r\n      toggle: false,\r\n    });\r\n    e.preventDefault();\r\n  };\r\n\r\n  //var event1;\r\n\r\n  handleEventClick = (info) => {\r\n    this.setState({\r\n      toggle1: !this.state.toggle1,\r\n      eventClicked: info.event.id,\r\n    });\r\n    var del = window.confirm(\"Delete the event?\");\r\n    if(del === true){\r\n      info.event.remove();\r\n    }\r\n  };\r\n\r\n  delEvent = (e) => {};\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <FullCalendar\r\n          plugins={[dayGridPlugin, interactionPlugin, bootstrapPlugin]}\r\n          initialView=\"dayGridMonth\"\r\n          selectable={true}\r\n          events={this.state.currentEvents}\r\n          weekends={this.state.weekendsVisible}\r\n          dayMaxEventRows={true}\r\n          customButtons={{\r\n            myCustomButton: {\r\n              text: \"Show/Hide Weekends\",\r\n              click: this.weekendView,\r\n            },\r\n          }}\r\n          headerToolbar={{\r\n            left: \"prev,next myCustomButton\",\r\n            center: \"title\",\r\n            right: \"today dayGridDay,dayGridWeek,dayGridMonth\",\r\n          }}\r\n          buttonText={{\r\n            today: \"Today\",\r\n            month: \"Month\",\r\n            week: \"Week\",\r\n            day: \"Day\",\r\n            list: \"List\",\r\n          }}\r\n          displayEventTime={true}\r\n          select={this.handleDateSelect}\r\n          eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\r\n          dateClick={this.handleDateClick}\r\n          eventClick={this.handleEventClick}\r\n        />\r\n        <Modal\r\n          show={this.state.toggle}\r\n          datechosen={this.state.dateclicked}\r\n          modalClosed={this.handleDateClick}\r\n          className=\"add\"\r\n        >\r\n          {/* <form onSubmit={this.handleSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter Event Title\"\r\n              value={this.state.name}\r\n              onChange={this.handleOnChange}\r\n            />\r\n            <p>Date: {this.state.dateclicked}</p>\r\n            <button type=\"submit\">Submit</button>\r\n          </form> */}\r\n\r\n          <Form onSubmit={this.handleSubmit}>\r\n            <Form.Group>\r\n              <Form.Label>Event Title</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter event title\"\r\n                value={this.state.name}\r\n                onChange={this.handleTitleOnChange}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Date</Form.Label>\r\n              <Form.Control\r\n                type=\"date\"\r\n                value={this.state.dateclicked}\r\n                onChange={this.handleDateOnChange}\r\n              />\r\n            </Form.Group>\r\n            {/* <Form.Group>\r\n              <Form.Label>Start Time</Form.Label>\r\n              <Form.Control type=\"datetime-local\" value={this.state.startTime} onChange={this.handleStartOnChange}/>\r\n            </Form.Group> */}\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </Modal>\r\n        {/* <Modal\r\n          show={this.state.toggle1}\r\n          modalClosed={this.handleEventClick}\r\n          className=\"del\"\r\n        >\r\n          <Form onSubmit={this.delEvent}>\r\n            <Button type=\"submit\">DELETE</Button>\r\n          </Form>\r\n          <br />\r\n          <Button>CONTINUE</Button>\r\n        </Modal> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventCalendar;\r\n","import React from 'react';\nimport EventCalendar from './components/EventCalendar/EventCalendar';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <EventCalendar/>\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}